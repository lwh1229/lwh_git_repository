# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from pan_tilt_msgs/PanTiltStatus.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class PanTiltStatus(genpy.Message):
  _md5sum = "c76162b6578981fa3815bffdd4df6ac3"
  _type = "pan_tilt_msgs/PanTiltStatus"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """## pan tilt ststus msg
Header  header
uint8   id
string  serial_num
string  hw_version
string  bd_version
string  sw_version
uint8   set_zero
int16   speed
float32 yaw_goal
float32 pitch_goal
uint16  reserved
uint16  driver_ec
uint16  encoder_ec
float32 yaw_now
float32 pitch_now
float32 yaw_temp
float32 pitch_temp
int16   yaw_raw
int16   pitch_raw
uint16  loop_ec
uint16  loop_time

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','id','serial_num','hw_version','bd_version','sw_version','set_zero','speed','yaw_goal','pitch_goal','reserved','driver_ec','encoder_ec','yaw_now','pitch_now','yaw_temp','pitch_temp','yaw_raw','pitch_raw','loop_ec','loop_time']
  _slot_types = ['std_msgs/Header','uint8','string','string','string','string','uint8','int16','float32','float32','uint16','uint16','uint16','float32','float32','float32','float32','int16','int16','uint16','uint16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,id,serial_num,hw_version,bd_version,sw_version,set_zero,speed,yaw_goal,pitch_goal,reserved,driver_ec,encoder_ec,yaw_now,pitch_now,yaw_temp,pitch_temp,yaw_raw,pitch_raw,loop_ec,loop_time

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PanTiltStatus, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.id is None:
        self.id = 0
      if self.serial_num is None:
        self.serial_num = ''
      if self.hw_version is None:
        self.hw_version = ''
      if self.bd_version is None:
        self.bd_version = ''
      if self.sw_version is None:
        self.sw_version = ''
      if self.set_zero is None:
        self.set_zero = 0
      if self.speed is None:
        self.speed = 0
      if self.yaw_goal is None:
        self.yaw_goal = 0.
      if self.pitch_goal is None:
        self.pitch_goal = 0.
      if self.reserved is None:
        self.reserved = 0
      if self.driver_ec is None:
        self.driver_ec = 0
      if self.encoder_ec is None:
        self.encoder_ec = 0
      if self.yaw_now is None:
        self.yaw_now = 0.
      if self.pitch_now is None:
        self.pitch_now = 0.
      if self.yaw_temp is None:
        self.yaw_temp = 0.
      if self.pitch_temp is None:
        self.pitch_temp = 0.
      if self.yaw_raw is None:
        self.yaw_raw = 0
      if self.pitch_raw is None:
        self.pitch_raw = 0
      if self.loop_ec is None:
        self.loop_ec = 0
      if self.loop_time is None:
        self.loop_time = 0
    else:
      self.header = std_msgs.msg.Header()
      self.id = 0
      self.serial_num = ''
      self.hw_version = ''
      self.bd_version = ''
      self.sw_version = ''
      self.set_zero = 0
      self.speed = 0
      self.yaw_goal = 0.
      self.pitch_goal = 0.
      self.reserved = 0
      self.driver_ec = 0
      self.encoder_ec = 0
      self.yaw_now = 0.
      self.pitch_now = 0.
      self.yaw_temp = 0.
      self.pitch_temp = 0.
      self.yaw_raw = 0
      self.pitch_raw = 0
      self.loop_ec = 0
      self.loop_time = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.id
      buff.write(_get_struct_B().pack(_x))
      _x = self.serial_num
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.hw_version
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.bd_version
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.sw_version
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_Bh2f3H4f2h2H().pack(_x.set_zero, _x.speed, _x.yaw_goal, _x.pitch_goal, _x.reserved, _x.driver_ec, _x.encoder_ec, _x.yaw_now, _x.pitch_now, _x.yaw_temp, _x.pitch_temp, _x.yaw_raw, _x.pitch_raw, _x.loop_ec, _x.loop_time))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 1
      (self.id,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.serial_num = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.serial_num = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.hw_version = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.hw_version = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.bd_version = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.bd_version = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.sw_version = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.sw_version = str[start:end]
      _x = self
      start = end
      end += 41
      (_x.set_zero, _x.speed, _x.yaw_goal, _x.pitch_goal, _x.reserved, _x.driver_ec, _x.encoder_ec, _x.yaw_now, _x.pitch_now, _x.yaw_temp, _x.pitch_temp, _x.yaw_raw, _x.pitch_raw, _x.loop_ec, _x.loop_time,) = _get_struct_Bh2f3H4f2h2H().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.id
      buff.write(_get_struct_B().pack(_x))
      _x = self.serial_num
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.hw_version
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.bd_version
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.sw_version
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_Bh2f3H4f2h2H().pack(_x.set_zero, _x.speed, _x.yaw_goal, _x.pitch_goal, _x.reserved, _x.driver_ec, _x.encoder_ec, _x.yaw_now, _x.pitch_now, _x.yaw_temp, _x.pitch_temp, _x.yaw_raw, _x.pitch_raw, _x.loop_ec, _x.loop_time))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 1
      (self.id,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.serial_num = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.serial_num = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.hw_version = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.hw_version = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.bd_version = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.bd_version = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.sw_version = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.sw_version = str[start:end]
      _x = self
      start = end
      end += 41
      (_x.set_zero, _x.speed, _x.yaw_goal, _x.pitch_goal, _x.reserved, _x.driver_ec, _x.encoder_ec, _x.yaw_now, _x.pitch_now, _x.yaw_temp, _x.pitch_temp, _x.yaw_raw, _x.pitch_raw, _x.loop_ec, _x.loop_time,) = _get_struct_Bh2f3H4f2h2H().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_Bh2f3H4f2h2H = None
def _get_struct_Bh2f3H4f2h2H():
    global _struct_Bh2f3H4f2h2H
    if _struct_Bh2f3H4f2h2H is None:
        _struct_Bh2f3H4f2h2H = struct.Struct("<Bh2f3H4f2h2H")
    return _struct_Bh2f3H4f2h2H
