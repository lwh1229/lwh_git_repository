// Generated by gencpp from file pan_tilt_msgs/PanTiltStatus.msg
// DO NOT EDIT!


#ifndef PAN_TILT_MSGS_MESSAGE_PANTILTSTATUS_H
#define PAN_TILT_MSGS_MESSAGE_PANTILTSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace pan_tilt_msgs
{
template <class ContainerAllocator>
struct PanTiltStatus_
{
  typedef PanTiltStatus_<ContainerAllocator> Type;

  PanTiltStatus_()
    : header()
    , id(0)
    , serial_num()
    , hw_version()
    , bd_version()
    , sw_version()
    , set_zero(0)
    , speed(0)
    , yaw_goal(0.0)
    , pitch_goal(0.0)
    , reserved(0)
    , driver_ec(0)
    , encoder_ec(0)
    , yaw_now(0.0)
    , pitch_now(0.0)
    , yaw_temp(0.0)
    , pitch_temp(0.0)
    , yaw_raw(0)
    , pitch_raw(0)
    , loop_ec(0)
    , loop_time(0)  {
    }
  PanTiltStatus_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , id(0)
    , serial_num(_alloc)
    , hw_version(_alloc)
    , bd_version(_alloc)
    , sw_version(_alloc)
    , set_zero(0)
    , speed(0)
    , yaw_goal(0.0)
    , pitch_goal(0.0)
    , reserved(0)
    , driver_ec(0)
    , encoder_ec(0)
    , yaw_now(0.0)
    , pitch_now(0.0)
    , yaw_temp(0.0)
    , pitch_temp(0.0)
    , yaw_raw(0)
    , pitch_raw(0)
    , loop_ec(0)
    , loop_time(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _id_type;
  _id_type id;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _serial_num_type;
  _serial_num_type serial_num;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _hw_version_type;
  _hw_version_type hw_version;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _bd_version_type;
  _bd_version_type bd_version;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _sw_version_type;
  _sw_version_type sw_version;

   typedef uint8_t _set_zero_type;
  _set_zero_type set_zero;

   typedef int16_t _speed_type;
  _speed_type speed;

   typedef float _yaw_goal_type;
  _yaw_goal_type yaw_goal;

   typedef float _pitch_goal_type;
  _pitch_goal_type pitch_goal;

   typedef uint16_t _reserved_type;
  _reserved_type reserved;

   typedef uint16_t _driver_ec_type;
  _driver_ec_type driver_ec;

   typedef uint16_t _encoder_ec_type;
  _encoder_ec_type encoder_ec;

   typedef float _yaw_now_type;
  _yaw_now_type yaw_now;

   typedef float _pitch_now_type;
  _pitch_now_type pitch_now;

   typedef float _yaw_temp_type;
  _yaw_temp_type yaw_temp;

   typedef float _pitch_temp_type;
  _pitch_temp_type pitch_temp;

   typedef int16_t _yaw_raw_type;
  _yaw_raw_type yaw_raw;

   typedef int16_t _pitch_raw_type;
  _pitch_raw_type pitch_raw;

   typedef uint16_t _loop_ec_type;
  _loop_ec_type loop_ec;

   typedef uint16_t _loop_time_type;
  _loop_time_type loop_time;





  typedef boost::shared_ptr< ::pan_tilt_msgs::PanTiltStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pan_tilt_msgs::PanTiltStatus_<ContainerAllocator> const> ConstPtr;

}; // struct PanTiltStatus_

typedef ::pan_tilt_msgs::PanTiltStatus_<std::allocator<void> > PanTiltStatus;

typedef boost::shared_ptr< ::pan_tilt_msgs::PanTiltStatus > PanTiltStatusPtr;
typedef boost::shared_ptr< ::pan_tilt_msgs::PanTiltStatus const> PanTiltStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pan_tilt_msgs::PanTiltStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pan_tilt_msgs::PanTiltStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pan_tilt_msgs::PanTiltStatus_<ContainerAllocator1> & lhs, const ::pan_tilt_msgs::PanTiltStatus_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.id == rhs.id &&
    lhs.serial_num == rhs.serial_num &&
    lhs.hw_version == rhs.hw_version &&
    lhs.bd_version == rhs.bd_version &&
    lhs.sw_version == rhs.sw_version &&
    lhs.set_zero == rhs.set_zero &&
    lhs.speed == rhs.speed &&
    lhs.yaw_goal == rhs.yaw_goal &&
    lhs.pitch_goal == rhs.pitch_goal &&
    lhs.reserved == rhs.reserved &&
    lhs.driver_ec == rhs.driver_ec &&
    lhs.encoder_ec == rhs.encoder_ec &&
    lhs.yaw_now == rhs.yaw_now &&
    lhs.pitch_now == rhs.pitch_now &&
    lhs.yaw_temp == rhs.yaw_temp &&
    lhs.pitch_temp == rhs.pitch_temp &&
    lhs.yaw_raw == rhs.yaw_raw &&
    lhs.pitch_raw == rhs.pitch_raw &&
    lhs.loop_ec == rhs.loop_ec &&
    lhs.loop_time == rhs.loop_time;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pan_tilt_msgs::PanTiltStatus_<ContainerAllocator1> & lhs, const ::pan_tilt_msgs::PanTiltStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pan_tilt_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pan_tilt_msgs::PanTiltStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pan_tilt_msgs::PanTiltStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pan_tilt_msgs::PanTiltStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pan_tilt_msgs::PanTiltStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pan_tilt_msgs::PanTiltStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pan_tilt_msgs::PanTiltStatus_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pan_tilt_msgs::PanTiltStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c76162b6578981fa3815bffdd4df6ac3";
  }

  static const char* value(const ::pan_tilt_msgs::PanTiltStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc76162b6578981faULL;
  static const uint64_t static_value2 = 0x3815bffdd4df6ac3ULL;
};

template<class ContainerAllocator>
struct DataType< ::pan_tilt_msgs::PanTiltStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pan_tilt_msgs/PanTiltStatus";
  }

  static const char* value(const ::pan_tilt_msgs::PanTiltStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pan_tilt_msgs::PanTiltStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "## pan tilt ststus msg\n"
"Header  header\n"
"uint8   id\n"
"string  serial_num\n"
"string  hw_version\n"
"string  bd_version\n"
"string  sw_version\n"
"uint8   set_zero\n"
"int16   speed\n"
"float32 yaw_goal\n"
"float32 pitch_goal\n"
"uint16  reserved\n"
"uint16  driver_ec\n"
"uint16  encoder_ec\n"
"float32 yaw_now\n"
"float32 pitch_now\n"
"float32 yaw_temp\n"
"float32 pitch_temp\n"
"int16   yaw_raw\n"
"int16   pitch_raw\n"
"uint16  loop_ec\n"
"uint16  loop_time\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::pan_tilt_msgs::PanTiltStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pan_tilt_msgs::PanTiltStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.id);
      stream.next(m.serial_num);
      stream.next(m.hw_version);
      stream.next(m.bd_version);
      stream.next(m.sw_version);
      stream.next(m.set_zero);
      stream.next(m.speed);
      stream.next(m.yaw_goal);
      stream.next(m.pitch_goal);
      stream.next(m.reserved);
      stream.next(m.driver_ec);
      stream.next(m.encoder_ec);
      stream.next(m.yaw_now);
      stream.next(m.pitch_now);
      stream.next(m.yaw_temp);
      stream.next(m.pitch_temp);
      stream.next(m.yaw_raw);
      stream.next(m.pitch_raw);
      stream.next(m.loop_ec);
      stream.next(m.loop_time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PanTiltStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pan_tilt_msgs::PanTiltStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pan_tilt_msgs::PanTiltStatus_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.id);
    s << indent << "serial_num: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.serial_num);
    s << indent << "hw_version: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.hw_version);
    s << indent << "bd_version: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.bd_version);
    s << indent << "sw_version: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.sw_version);
    s << indent << "set_zero: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.set_zero);
    s << indent << "speed: ";
    Printer<int16_t>::stream(s, indent + "  ", v.speed);
    s << indent << "yaw_goal: ";
    Printer<float>::stream(s, indent + "  ", v.yaw_goal);
    s << indent << "pitch_goal: ";
    Printer<float>::stream(s, indent + "  ", v.pitch_goal);
    s << indent << "reserved: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.reserved);
    s << indent << "driver_ec: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.driver_ec);
    s << indent << "encoder_ec: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.encoder_ec);
    s << indent << "yaw_now: ";
    Printer<float>::stream(s, indent + "  ", v.yaw_now);
    s << indent << "pitch_now: ";
    Printer<float>::stream(s, indent + "  ", v.pitch_now);
    s << indent << "yaw_temp: ";
    Printer<float>::stream(s, indent + "  ", v.yaw_temp);
    s << indent << "pitch_temp: ";
    Printer<float>::stream(s, indent + "  ", v.pitch_temp);
    s << indent << "yaw_raw: ";
    Printer<int16_t>::stream(s, indent + "  ", v.yaw_raw);
    s << indent << "pitch_raw: ";
    Printer<int16_t>::stream(s, indent + "  ", v.pitch_raw);
    s << indent << "loop_ec: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.loop_ec);
    s << indent << "loop_time: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.loop_time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PAN_TILT_MSGS_MESSAGE_PANTILTSTATUS_H
